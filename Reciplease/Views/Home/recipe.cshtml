@model Reciplease.Models.HomeContent

@{
	ViewBag.Title = "Recipe";
}

<style>
	<style >
	* {
		box-sizing: border-box;
	}

	.openBtn {
		display: flex;
		justify-content: left;
	}

	.openButton {
		border: none;
		border-radius: 5px;
		background-color: #1c87c9;
		color: white;
		padding: 14px 20px;
		cursor: pointer;
		position: fixed;
	}

	.loginPopup {
		position: relative;
		text-align: center;
		width: 100%;
	}

	.formPopup {
		display: none;
		position: fixed;
		left: 45%;
		top: 5%;
		transform: translate(-50%, 5%);
		border: 3px solid #999999;
		z-index: 9;
	}

	.formContainer {
		max-width: 300px;
		padding: 20px;
		background-color: #fff;
	}

	.formContainer input[type=text],
	.formContainer input[type=password] {
		width: 100%;
		padding: 15px;
		margin: 5px 0 20px 0;
		border: none;
		background: #eee;
	}

	.formContainer input[type=text]:focus,
	.formContainer input[type=password]:focus {
		background-color: #ddd;
		outline: none;
	}

	.formContainer .btn {
		padding: 12px 20px;
		border: none;
		background-color: #8ebf42;
		color: #fff;
		cursor: pointer;
		width: 100%;
		margin-bottom: 15px;
		opacity: 0.8;
	}

	.formContainer .cancel {
		background-color: #cc0000;
	}

	.formContainer .btn:hover,
	.openButton:hover {
		opacity: 1;
	}

	.slidecontainer {
		width: 100%; /* Width of the outside container */
	}

	/* The slider itself */
	.slider {
		-webkit-appearance: none; /* Override default CSS styles */
		appearance: none;
		width: 100%; /* Full-width */
		height: 25px; /* Specified height */
		background: #d3d3d3; /* Grey background */
		outline: none; /* Remove outline */
		opacity: 0.7; /* Set transparency (for mouse-over effects on hover) */
		-webkit-transition: .2s; /* 0.2 seconds transition on hover */
		transition: opacity .2s;
	}

	/* Mouse-over effects */
	.slider:hover {
		opacity: 1; /* Fully shown on mouse-over */
	}

	/* The slider handle (use -webkit- (Chrome, Opera, Safari, Edge) and -moz- (Firefox) to override default look) */
	.slider::-webkit-slider-thumb {
		-webkit-appearance: none; /* Override default look */
		appearance: none;
		width: 25px; /* Set a specific slider handle width */
		height: 25px; /* Slider handle height */
		background: #04AA6D; /* Green background */
		cursor: pointer; /* Cursor on hover */
	}

	.slider::-moz-range-thumb {
		width: 25px; /* Set a specific slider handle width */
		height: 25px; /* Slider handle height */
		background: #04AA6D; /* Green background */
		cursor: pointer; /* Cursor on hover */
	}
</style>

<h2>@ViewBag.Title</h2>
@{ ViewBag.Title = "Recipe"; }

<link href='https://fonts.googleapis.com/css?family=Montserrat' rel='stylesheet'>
<style>
	body {
		font-family: 'Montserrat';
	}
</style>
<!-- Page Content  -->
<div id="content" class="p-4 p-md-5 pt-5" style="content:align-center;">


	@if ( Model.SingleRecipe.id != null )
	{
		<div class="recipe-card">
			@if ( Model.user.IsAuthenticated )
			{
				if ( Model.user.IsAFavorite( Model.SingleRecipe.id ) )
				{
					<input type="button" class="button" id="togglefavorite" onclick="toggle()" value="UnFavorite" /> }
				else
				{
					<input type="button" class="button" id="togglefavorite" onclick="toggle()" value="Favorite" />}
			}

			<article>
				<h2>@Model.SingleRecipe.title</h2>
				<br />
				<img src=@Model.SingleRecipe.image alt=@Model.SingleRecipe.title />
				<br />
				<br />
				<p>Ready in : @Model.SingleRecipe.readyInMinutes minutes</p>
				<p>Servings : @Model.SingleRecipe.servings </p>

				<p>Cuisines: @String.Join( ", ", @Model.SingleRecipe.cuisines )</p>
				<p>Diets: @String.Join( ", ", @Model.SingleRecipe.diets )</p>
				<p>Dish Types: @String.Join( ", ", @Model.SingleRecipe.dishTypes )</p>

				<table>


					<tr><th>Ingredient:</th><th>Amount:</th></tr>

					@foreach ( Reciplease.Models.Ingredient ingredient in Model.SingleRecipe.GetFractionizedIngredients( ) )
					{
						<tr><td>@ingredient.name</td>  <td>        @ingredient.amount @ingredient.unit</td></tr>
					}
				</table>

				<hr />
				<br />
				<h3>Instructions:</h3>
				<ol>
					@foreach ( String instruction in @Model.SingleRecipe.SplitInstructions( ) )
					{
						<li>@instruction</li>
					}
				</ol>


				<div id="nutritionDiv" style="display:none">
					@try
					{

						var nutritionTable = "<table><tr><th>Nutrient:</th><th>Amount:</th><th>Percent of Daily Value</th></tr>";
						foreach ( Reciplease.Models.Nutrient nutrient in Model.SingleRecipe.nutrition.nutrients )
						{
							nutritionTable += "<tr><td>" + @nutrient.Name + "</td><td>" + @nutrient.Amount + " " + @nutrient.Unit + "</td><td>" + @nutrient.PercentOfDailyNeeds + "%</td></tr>";
						}
						nutritionTable += "</table>";

						WriteLiteral( nutritionTable );
					}
					catch ( Exception e )
					{
						<p> No Nutrition Data Available </p>}
				</div>
				<button class="button" id="btnNutrition" onclick="showNutrition()">Show Nutrition</button>

			</article>
			@if ( Model.user.IsAuthenticated )
			{
			<a href="@Url.Action( "AddToCart", "Cart", new { id = Model.SingleRecipe.id } )" class="button">
				Add to shopping cart
			</a>}

			@*-End add to cart button-*@
			<a href="@Url.Action("CreateRecipe", "Profile", new { id = Model.SingleRecipe.id })" class="button">
				Edit Recipe
			</a>
			@*-End Display Recipe-*@

			<a id="share" class="button" onclick="copyToClipboard(@Model.SingleRecipe.id)">Copy Recipe Link</a>

			<br>
			@*-Rating System-*@
			<form id="Form1" method="post">
				<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
				<style>
					.checked {
						color: orange;
					}
				</style>
				@{ int DifficultyRate = 0;
					int TasteRate = 0;

					foreach ( Reciplease.Models.Rating r in Model.user.Ratings )
					{
						if ( r.intRecipeID == int.Parse( Model.SingleRecipe.id ) )
						{
							DifficultyRate = r.intDifficultyRating;
							TasteRate = r.intTasteRating;
						}
					}

					string[] DifficultyRates = new string[5];
					if ( DifficultyRate > 0 ) { DifficultyRates[0] = "checked"; }
					if ( DifficultyRate > 1 ) { DifficultyRates[1] = "checked"; }
					if ( DifficultyRate > 2 ) { DifficultyRates[2] = "checked"; }
					if ( DifficultyRate > 3 ) { DifficultyRates[3] = "checked"; }
					if ( DifficultyRate > 4 ) { DifficultyRates[4] = "checked"; }
					<p><b>Difficulty</b></p>
					<span id="rate1" class="fa fa-star @DifficultyRates[0] rate-star"></span>
					<span id="rate2" class="fa fa-star @DifficultyRates[1] rate-star"></span>
					<span id="rate3" class="fa fa-star @DifficultyRates[2] rate-star"></span>
					<span id="rate4" class="fa fa-star @DifficultyRates[3] rate-star"></span>
					<span id="rate5" class="fa fa-star @DifficultyRates[4] rate-star"></span>

					string[] TasteRatings = new string[5];
					if ( TasteRate > 0 ) { TasteRatings[0] = "checked"; }
					if ( TasteRate > 1 ) { TasteRatings[1] = "checked"; }
					if ( TasteRate > 2 ) { TasteRatings[2] = "checked"; }
					if ( TasteRate > 3 ) { TasteRatings[3] = "checked"; }
					if ( TasteRate > 4 ) { TasteRatings[4] = "checked"; }
					<p><b>Taste</b></p>
					<span id="rate1" class="fa fa-star @TasteRatings[0] rate-star"></span>
					<span id="rate2" class="fa fa-star @TasteRatings[1] rate-star"></span>
					<span id="rate3" class="fa fa-star @TasteRatings[2] rate-star"></span>
					<span id="rate4" class="fa fa-star @TasteRatings[3] rate-star"></span>
					<span id="rate5" class="fa fa-star @TasteRatings[4] rate-star"></span>
				}
				<br />

			</form>

			@*Begin popup*@



			@if ( Model.user.IsAuthenticated )
			{
				<button class="button" onclick="RateToggle()">Rate</button>
				<div id="popupForm" style="display:none">
					<form id="Form1" method="post">
						<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
						<style>
							.checked {
								color: orange;
							}
						</style>
						@{

							foreach ( Reciplease.Models.Rating r in Model.user.Ratings )
							{
								if ( r.intRecipeID == int.Parse( Model.SingleRecipe.id ) )
								{
									DifficultyRate = r.intDifficultyRating;
									TasteRate = r.intTasteRating;
								}
							}

							<p><b>Difficulty</b></p>
							<div class="slidecontainer">
								<input type="range" min="1" max="5" value=@DifficultyRate class="slider" id="DifficultyRate">
								<p id="outputDifficulty"></p>
							</div>

							<p><b>Taste</b></p>
							<div class="slidecontainer">
								<input type="range" min="1" max="5" value=@TasteRate class="slider" id="TasteRate">
								<p id="outputTaste"></p>
							</div>

						}

						<button onclick="rateRecipe(@Model.user.UID, @Model.SingleRecipe.id, $('#DifficultyRate').val(), $('#TasteRate').val());" class="btn">Submit</button>
						<br>
						<br>
						<button type="submit" hidden class="btn">Submit</button>


					</form>
				</div>
			}
			<div id="snackbar">Some text some message..</div>

		</div>
	}
	else
	{
		<div class="alert alert-warning" role="alert">
			Recipe was not found. Please try another. 
		</div>
	}





</div>


<script>
	function RateToggle() {
		var AS = document.getElementById("popupForm");
		if (AS.style.display === "none") {
			AS.style.display = "block";
		} else {

			AS.style.display = "none";
		}
	}

	var slider1 = document.getElementById("TasteRate");
	var output1 = document.getElementById("outputTaste");
	output1.innerHTML = slider1.value; // Display the default slider value

	// Update the current slider value (each time you drag the slider handle)
	slider1.oninput = function () {
		output1.innerHTML = this.value;
	}

	var slider2 = document.getElementById("DifficultyRate");
	var output2 = document.getElementById("outputDifficulty");
	output2.innerHTML = slider2.value; // Display the default slider value

	// Update the current slider value (each time you drag the slider handle)
	slider2.oninput = function () {
		output2.innerHTML = this.value;
	}
</script>


<script>
	function toggle() {
		/**/
		$.ajax({
			type: "POST",
			url: '@Url.Action( "ToggleFavorite", "Home", new { id = Model.SingleRecipe.id } )',
			async: true,
			success: function (msg) {

				if (msg.responseText == 0) {
					$("#togglefavorite").prop("value", "UnFavorite");
					var x = document.getElementById("snackbar");

					// Add the "show" class to DIV
					x.className = "show";

					x.textContent = "Recipe Favorited"

					// After 3 seconds, remove the show class from DIV
					setTimeout(function () { x.className = x.className.replace("show", ""); }, 3000);
				}
				else if (msg.responseText == 1) {
					$("#togglefavorite").prop("value", "Favorite");
					var x = document.getElementById("snackbar");

					// Add the "show" class to DIV
					x.className = "show";

					x.textContent = "Recipe UnFavorited"

					// After 3 seconds, remove the show class from DIV
					setTimeout(function () { x.className = x.className.replace("show", ""); }, 3000);
				}

			},
			error: function () {
				alert("Error toggling the favorite. Please contact developers.")
			}
		});
	}

</script>

<script src="js/jquery.min.js"></script>
<script src="js/popper.js"></script>
<script src="js/bootstrap.min.js"></script>
<script src="js/main.js"></script>
